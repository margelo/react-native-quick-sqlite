///
/// HybridNativeQueryResultSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `SQLiteQueryColumnMetadata` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { struct SQLiteQueryColumnMetadata; }

#include <optional>
#include <vector>
#include <unordered_map>
#include <string>
#include <variant>
#include <NitroModules/ArrayBuffer.hpp>
#include "SQLiteQueryColumnMetadata.hpp"

namespace margelo::nitro::rnquicksqlite {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NativeQueryResult`
   * Inherit this class to create instances of `HybridNativeQueryResultSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridNativeQueryResult: public HybridNativeQueryResultSpec {
   * public:
   *   HybridNativeQueryResult(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridNativeQueryResultSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridNativeQueryResultSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridNativeQueryResultSpec() { }

    public:
      // Properties
      virtual double getRowsAffected() = 0;
      virtual std::optional<double> getInsertId() = 0;
      virtual std::vector<std::unordered_map<std::string, std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>> getResults() = 0;
      virtual std::optional<std::unordered_map<std::string, SQLiteQueryColumnMetadata>> getMetadata() = 0;

    public:
      // Methods
      

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NativeQueryResult";
  };

} // namespace margelo::nitro::rnquicksqlite
