///
/// BatchQueryCommand.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <string>
#include <optional>
#include <variant>
#include <vector>
#include <NitroModules/ArrayBuffer.hpp>

namespace margelo::nitro::rnquicksqlite {

  /**
   * A struct which can be represented as a JavaScript object (BatchQueryCommand).
   */
  struct BatchQueryCommand {
  public:
    std::string query     SWIFT_PRIVATE;
    std::optional<std::variant<std::vector<std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>, std::vector<std::vector<std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>>>> params     SWIFT_PRIVATE;

  public:
    explicit BatchQueryCommand(std::string query, std::optional<std::variant<std::vector<std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>, std::vector<std::vector<std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>>>> params): query(query), params(params) {}
  };

} // namespace margelo::nitro::rnquicksqlite

namespace margelo::nitro {

  using namespace margelo::nitro::rnquicksqlite;

  // C++ BatchQueryCommand <> JS BatchQueryCommand (object)
  template <>
  struct JSIConverter<BatchQueryCommand> {
    static inline BatchQueryCommand fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return BatchQueryCommand(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "query")),
        JSIConverter<std::optional<std::variant<std::vector<std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>, std::vector<std::vector<std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>>>>>::fromJSI(runtime, obj.getProperty(runtime, "params"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const BatchQueryCommand& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "query", JSIConverter<std::string>::toJSI(runtime, arg.query));
      obj.setProperty(runtime, "params", JSIConverter<std::optional<std::variant<std::vector<std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>, std::vector<std::vector<std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>>>>>::toJSI(runtime, arg.params));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "query"))) return false;
      if (!JSIConverter<std::optional<std::variant<std::vector<std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>, std::vector<std::vector<std::variant<std::string, double, int64_t, bool, std::shared_ptr<ArrayBuffer>>>>>>>::canConvert(runtime, obj.getProperty(runtime, "params"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
