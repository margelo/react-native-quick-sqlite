///
/// SQLiteQueryColumnMetadata.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ColumnType` to properly resolve imports.
namespace margelo::nitro::rnquicksqlite { enum class ColumnType; }

#include <string>
#include "ColumnType.hpp"

namespace margelo::nitro::rnquicksqlite {

  /**
   * A struct which can be represented as a JavaScript object (SQLiteQueryColumnMetadata).
   */
  struct SQLiteQueryColumnMetadata {
  public:
    std::string name     SWIFT_PRIVATE;
    ColumnType type     SWIFT_PRIVATE;
    double index     SWIFT_PRIVATE;

  public:
    explicit SQLiteQueryColumnMetadata(std::string name, ColumnType type, double index): name(name), type(type), index(index) {}
  };

} // namespace margelo::nitro::rnquicksqlite

namespace margelo::nitro {

  using namespace margelo::nitro::rnquicksqlite;

  // C++ SQLiteQueryColumnMetadata <> JS SQLiteQueryColumnMetadata (object)
  template <>
  struct JSIConverter<SQLiteQueryColumnMetadata> {
    static inline SQLiteQueryColumnMetadata fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return SQLiteQueryColumnMetadata(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "name")),
        JSIConverter<ColumnType>::fromJSI(runtime, obj.getProperty(runtime, "type")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "index"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const SQLiteQueryColumnMetadata& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "name", JSIConverter<std::string>::toJSI(runtime, arg.name));
      obj.setProperty(runtime, "type", JSIConverter<ColumnType>::toJSI(runtime, arg.type));
      obj.setProperty(runtime, "index", JSIConverter<double>::toJSI(runtime, arg.index));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "name"))) return false;
      if (!JSIConverter<ColumnType>::canConvert(runtime, obj.getProperty(runtime, "type"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "index"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
