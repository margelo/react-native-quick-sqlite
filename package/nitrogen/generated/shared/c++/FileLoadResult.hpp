///
/// FileLoadResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>

namespace margelo::nitro::rnquicksqlite {

  /**
   * A struct which can be represented as a JavaScript object (FileLoadResult).
   */
  struct FileLoadResult {
  public:
    std::optional<double> commands     SWIFT_PRIVATE;
    std::optional<double> rowsAffected     SWIFT_PRIVATE;

  public:
    explicit FileLoadResult(std::optional<double> commands, std::optional<double> rowsAffected): commands(commands), rowsAffected(rowsAffected) {}
  };

} // namespace margelo::nitro::rnquicksqlite

namespace margelo::nitro {

  using namespace margelo::nitro::rnquicksqlite;

  // C++ FileLoadResult <> JS FileLoadResult (object)
  template <>
  struct JSIConverter<FileLoadResult> {
    static inline FileLoadResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return FileLoadResult(
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "commands")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "rowsAffected"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const FileLoadResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "commands", JSIConverter<std::optional<double>>::toJSI(runtime, arg.commands));
      obj.setProperty(runtime, "rowsAffected", JSIConverter<std::optional<double>>::toJSI(runtime, arg.rowsAffected));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "commands"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "rowsAffected"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
